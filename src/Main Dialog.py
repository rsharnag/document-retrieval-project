
#!/usr/bin/env python
'''
Created on 11-Apr-2011

@author: rahul
'''
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Mon Apr 11 20:12:06 2011

import wx
import wx.grid
from query_processor import DocProcessor
from hasher import Hasher
from fileView1 import FileView
import thread
from threading import Thread
try:
    import cPickle as pickle
except ImportError:
    import pickle
import os
# begin wxGlade: extracode
# end wxGlade

myEVT_COUNT = wx.NewEventType()
myEVT_UPDATE = wx.NewEventType()
EVT_COUNT = wx.PyEventBinder(myEVT_COUNT, 1)
EVT_UPDATE = wx.PyEventBinder(myEVT_UPDATE, 1)
class CountEvent(wx.PyCommandEvent):
    def __init__(self, etype, eid, value=None):
        wx.PyCommandEvent.__init__(self, etype, eid)
        self._value = value
        
    def GetValue(self):
        return self._value
class updateEvent(wx.PyCommandEvent):
    def __init__(self, etype, eid, value=None):
        wx.PyCommandEvent.__init__(self, etype, eid)
        self._value = value
        
    def GetValue(self):
        return self._value

class DocProcessorDialog(wx.Frame):
    ViewFile=None
    def __init__(self, *args, **kwds):
        # begin wxGlade: DocProcessorDialog.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook_1 = wx.Notebook(self, -1, style=0)
        self.notebook_1_pane_3 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_2 = wx.Panel(self.notebook_1, -1)
        self.notebook_1_pane_1 = wx.Panel(self.notebook_1, -1)
        self.statusBar = self.CreateStatusBar(1, 0)
        self.label_1 = wx.StaticText(self.notebook_1_pane_1, -1, "Query :")
        self.query_ctrl = wx.TextCtrl(self.notebook_1_pane_1, -1, "", style=wx.TE_MULTILINE|wx.TE_LINEWRAP|wx.TE_WORDWRAP)
        self.label_2 = wx.StaticText(self.notebook_1_pane_1, -1, "Number of Results :")
        self.num_result_ctrl = wx.TextCtrl(self.notebook_1_pane_1, -1, "10")
        self.label_3 = wx.StaticText(self.notebook_1_pane_1, -1, "Results :")
        self.search_result_list_box = wx.ListBox(self.notebook_1_pane_1, -1, choices=[])
        self.Search = wx.Button(self.notebook_1_pane_1, -1, "&Search")
        self.tagger_result_grid = wx.grid.Grid(self.notebook_1_pane_2, -1, size=(1, 1))
        self.type_radio_box = wx.RadioBox(self.notebook_1_pane_2, -1, "Type", choices=["Nouns", "Verbs", "Adjectives", "Adverbs"], majorDimension=2, style=wx.RA_SPECIFY_COLS)
        self.Tagger_Refresh = wx.Button(self.notebook_1_pane_2, wx.ID_REFRESH, "")
        self.generalisation_grid = wx.grid.Grid(self.notebook_1_pane_3, -1, size=(1, 1))
        self.generalisation_refresh = wx.Button(self.notebook_1_pane_3, wx.ID_REFRESH, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_LISTBOX_DCLICK, self.onDoubleClickSearchResult, self.search_result_list_box)
        self.Bind(wx.EVT_BUTTON, self.onSreachPress, self.Search)
        self.Bind(wx.EVT_RADIOBOX, self.onTypeChange, self.type_radio_box)
        self.Bind(wx.EVT_BUTTON, self.onRefreshTagger, self.Tagger_Refresh)
        self.Bind(wx.EVT_BUTTON, self.onRefreshGeneralisation, self.generalisation_refresh)
        self.Bind(EVT_COUNT, self.onStatusChange)
        self.Bind(EVT_UPDATE, self.updateResults)
        # end wxGlade
        #Extra Code
        
        
    def __set_properties(self):
        # begin wxGlade: DocProcessorDialog.__set_properties
        self.SetTitle("Document Retrieval")
        self.SetSize((678, 545))
        self.statusBar.SetStatusWidths([-1])
        # statusbar fields
        statusBar_fields = ["Status"]
        for i in range(len(statusBar_fields)):
            self.statusBar.SetStatusText(statusBar_fields[i], i)
        self.tagger_result_grid.CreateGrid(30, 1)
        self.tagger_result_grid.EnableEditing(0)
        self.tagger_result_grid.SetColLabelValue(0, "Words")
        self.tagger_result_grid.SetColSize(0, 400)
        self.type_radio_box.SetSelection(0)
        self.generalisation_grid.CreateGrid(100, 1)
        self.generalisation_grid.SetColLabelValue(0, "Words Added")
        self.generalisation_grid.SetColSize(0, 600)
        # end wxGlade
    def OnExit(self,e):
        if(self.ViewFile!= None):
            self.ViewFile.Close(True)
        self.Close(True)
    def __do_layout(self):
        # begin wxGlade: DocProcessorDialog.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.label_1, 0, wx.ALL|wx.EXPAND, 5)
        sizer_2.Add(self.query_ctrl, 1, wx.LEFT|wx.EXPAND, 0)
        sizer_3.Add(self.label_2, 0, wx.ALL, 5)
        sizer_3.Add(self.num_result_ctrl, 0, 0, 0)
        sizer_2.Add(sizer_3, 0, 0, 0)
        sizer_2.Add(self.label_3, 0, wx.ALL|wx.EXPAND, 5)
        sizer_2.Add(self.search_result_list_box, 1, wx.EXPAND, 0)
        sizer_2.Add(self.Search, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.SHAPED, 5)
        self.notebook_1_pane_1.SetSizer(sizer_2)
        sizer_5.Add(self.tagger_result_grid, 1, wx.EXPAND, 0)
        sizer_5.Add(self.type_radio_box, 0, wx.ALL|wx.ALIGN_RIGHT, 5)
        sizer_4.Add(sizer_5, 1, wx.EXPAND, 0)
        sizer_4.Add(self.Tagger_Refresh, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL|wx.SHAPED, 5)
        self.notebook_1_pane_2.SetSizer(sizer_4)
        sizer_6.Add(self.generalisation_grid, 1, wx.EXPAND, 0)
        sizer_6.Add(self.generalisation_refresh, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 5)
        self.notebook_1_pane_3.SetSizer(sizer_6)
        self.notebook_1.AddPage(self.notebook_1_pane_1, "Search Box")
        self.notebook_1.AddPage(self.notebook_1_pane_2, "Tagger")
        self.notebook_1.AddPage(self.notebook_1_pane_3, "Generalisation")
        sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        self.Centre()
        # end wxGlade

    def onDoubleClickSearchResult(self, event): # wxGlade: DocProcessorDialog.<event_handler>
        index=self.search_result_list_box.GetSelection()
        self.statusBar.SetStatusText("opening file "+self.search_result_list_box.GetString(index))
        self.dialog_1 = FileView(None, -1, "")
        self.dialog_1.setText(self.search_result_list_box.GetString(index))
        self.dialog_1.ShowModal()
        self.dialog_1.Destroy()
        self.statusBar.SetStatusText("file closed")
#        self.ViewFile = fileViewDialog(0)
#        self.ViewFile.setFileToOpen(self.search_result_list_box.GetString(index))
#        self.statusBar.SetStatusText("")
#        self.ViewFile.ShowModal()
#        self.Destroy()
        

    def onSreachPress(self, event): # wxGlade: DocProcessorDialog.<event_handler>
        text=self.query_ctrl.GetValue()
        if text =="" :
            event.Skip()
            return        
        num_of_results=self.num_result_ctrl.GetValue()
        self.search_result_list_box.Clear()
        worker = updateThread(self, text, num_of_results)
        worker.start()
    def updateResults(self, evt):
        result=evt.GetValue()
        #Updating result box
        self.search_result_list_box.Clear()
        for i in result:
             self.search_result_list_box.Append(unicode(i))
        #updating Generalized Wordlist
        file=open(os.curdir+"/dumps/GW_dump", "r")
        self.gwList=pickle.load(file)
        file.close()
        i=0
        self.generalisation_grid.ClearGrid()
        if(len(self.gwList)>self.generalisation_grid.GetNumberRows()):
            self.generalisation_grid.AppendRows(len(self.gwList)-100)
        for word in self.gwList:
            self.generalisation_grid.SetCellValue(i, 0, unicode(word))
            i+=1
        #Updating Tagger Result
        file=open(os.curdir+"/dumps/tagger_dump", "r")
        self.taggerWords=pickle.load(file)
        file.close()
        i=0
        self.tagger_result_grid.ClearGrid()
        if(len(self.taggerWords[self.type_radio_box.GetSelection()])>self.tagger_result_grid.GetNumberRows()):
            self.tagger_result_grid.AppendRows(len(self.taggerWords[self.type_radio_box.GetSelection()])-self.tagger_result_grid.GetNumberRows())
        for word in self.taggerWords[self.type_radio_box.GetSelection()]:
            if(word.isalpha() and word!=''):
                self.tagger_result_grid.SetCellValue(i, 0, unicode(word))
            i+=1

    def onStatusChange(self, evt):
        msg=evt.GetValue()
        self.statusBar.SetStatusText(unicode(msg))
        
        
    def onTypeChange(self, event): # wxGlade: DocProcessorDialog.<event_handler>
        self.tagger_result_grid.ClearGrid()
        i=0
        for word in self.taggerWords[self.type_radio_box.GetSelection()]:
            if(word.isalpha() and word!=''):
                self.tagger_result_grid.SetCellValue(i, 0, unicode(word))
            i+=1

    def onRefreshTagger(self, event): # wxGlade: DocProcessorDialog.<event_handler>
        file=open(os.curdir+"/dumps/tagger_dump", "r")
        self.taggerWords=pickle.load(file)
        file.close()
        i=0
        self.tagger_result_grid.ClearGrid()
        if(len(self.taggerWords[self.type_radio_box.GetSelection()])>self.tagger_result_grid.GetNumberRows()):
            self.tagger_result_grid.AppendRows(len(self.taggerWords[self.type_radio_box.GetSelection()])-self.tagger_result_grid.GetNumberRows())
        for word in self.taggerWords[self.type_radio_box.GetSelection()]:
            if(word.isalpha() and word!=''):
                self.tagger_result_grid.SetCellValue(i, 0, unicode(word))
            i+=1
    def onRefreshGeneralisation(self, event): # wxGlade: DocProcessorDialog.<event_handler>
        file=open(os.curdir+"/dumps/GW_dump", "r")
        self.gwList=pickle.load(file)
        file.close()
        i=0
        self.generalisation_grid.ClearGrid()
        if(len(self.gwList)>self.generalisation_grid.GetNumberRows()):
            self.generalisation_grid.AppendRows(len(self.gwList)-100)
        for word in self.gwList:
            self.generalisation_grid.SetCellValue(i, 0, unicode(word))
            i+=1
        

# end of class DocProcessorDialog
class updateThread(Thread):
    def __init__(self, parent, queryText, num_of_results):
        Thread.__init__(self)
        self._queryText=queryText
        self._num_of_results = int(num_of_results)
        self._parent=parent
        self._hash=Hasher()
        self._hash.read_dump()
        self._doc_processor = DocProcessor(self._hash)

    def run(self):
        files=open("taggerText", "w")
        files.write(self._queryText)
        files.close()
        evt1=CountEvent(myEVT_COUNT, -1, "processing")
        wx.PostEvent(self._parent, evt1)
        results=self._doc_processor.process("taggerText", int(self._num_of_results))
        result=[]
        for i in results:
            result.append(self._hash.map_count[i])
        evt2=updateEvent(myEVT_UPDATE, -1, result)
        wx.PostEvent(self._parent, evt2)
        evt1=CountEvent(myEVT_COUNT, -1, "done")
        wx.PostEvent(self._parent, evt1)
        
class MyApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame_1 = DocProcessorDialog(None, -1, "")
        self.SetTopWindow(frame_1)
        frame_1.Show()
        return 1
#class process(Thread):
#    def __init__(self, result_count):
#        self.result_count=result_count
#        self.hash=Hasher()
#        self.hash.read_dump()
#        self.doc_processor = DocProcessor(self.hash)
#    def run(self):
#        self.doc_processor.process("taggerText", self.result_count)
        
# end of class MyApp

if __name__ == "__main__":
    Document_retrieval = MyApp(0)
    Document_retrieval.MainLoop()
